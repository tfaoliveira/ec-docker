require "params.jinc"
require "polyvec.jinc"

/* These exported functions are just for unit testing */

export fn polyvec_tobytes_jazz(reg u64 rp, reg u64 ap) 
{
  stack u16[KYBER_VECN] a;
  reg u16 t;
  inline int i;

  for i = 0 to KYBER_VECN {
    t = (u16)[ap + 2*i];
    a[i] = t;
  }

  a[0:KYBER_N] = _nttunpack(a[0:KYBER_N]);
  a[KYBER_N:KYBER_N] = _nttunpack(a[KYBER_N:KYBER_N]);
  a[2*KYBER_N:KYBER_N] = _nttunpack(a[2*KYBER_N:KYBER_N]);

  __polyvec_tobytes(rp, a);
}


export fn polyvec_decompress_jazz(reg u64 rp, reg u64 ap) 
{
  stack u16[KYBER_VECN] r;
  reg u16 t;
  inline int i;

  r = __polyvec_decompress(ap);

  for i = 0 to KYBER_VECN {
    t = r[i];
    (u16)[rp + 2*i] = t;
  }
}


export fn polyvec_compress_jazz(reg u64 rp, reg u64 ap) 
{
  stack u16[KYBER_VECN] a;
  reg u16 t;
  inline int i;

  for i = 0 to KYBER_VECN {
    t = (u16)[ap + 2*i];
    a[i] = t;
  }

  __polyvec_compress(rp, a);
}


export fn polyvec_frombytes_jazz(reg u64 rp, reg u64 ap) 
{
  stack u16[KYBER_VECN] r;
  reg u16 t;
  inline int i;

  r = __polyvec_frombytes(ap);

  r[0:KYBER_N] = _nttpack(r[0:KYBER_N]);
  r[KYBER_N:KYBER_N] = _nttpack(r[KYBER_N:KYBER_N]);
  r[2*KYBER_N:KYBER_N] = _nttpack(r[2*KYBER_N:KYBER_N]);

  for i = 0 to KYBER_VECN {
    t = r[i];
    (u16)[rp + 2*i] = t;
  }
}

export fn polyvec_add2_jazz(reg u64 rp, reg u64 bp) 
{
  stack u16[KYBER_VECN] a;
  stack u16[KYBER_VECN] b;
  stack u16[KYBER_VECN] r;
  reg u16 t;
  inline int i;

  for i = 0 to KYBER_VECN {
    t = (u16)[rp + 2*i];
    a[i] = t;
    t = (u16)[bp + 2*i];
    b[i] = t;
  }

  r = __polyvec_add2(a, b);

  for i = 0 to KYBER_VECN {
    t = r[i];
    (u16)[rp + 2*i] = t;
  }
}

export fn polyvec_pointwise_acc_jazz(reg u64 rp, reg u64 ap, reg u64 bp) 
{
  stack u16[KYBER_VECN] a;
  stack u16[KYBER_VECN] b;
  stack u16[KYBER_N] r;
  reg u16 t;
  inline int i;

  for i = 0 to KYBER_VECN {
    t = (u16)[ap + 2*i];
    a[i] = t;
    t = (u16)[bp + 2*i];
    b[i] = t;
  }

  a[0:KYBER_N] = _nttunpack(a[0:KYBER_N]);
  a[KYBER_N:KYBER_N] = _nttunpack(a[KYBER_N:KYBER_N]);
  a[2*KYBER_N:KYBER_N] = _nttunpack(a[2*KYBER_N:KYBER_N]);

  b[0:KYBER_N] = _nttunpack(b[0:KYBER_N]);
  b[KYBER_N:KYBER_N] = _nttunpack(b[KYBER_N:KYBER_N]);
  b[2*KYBER_N:KYBER_N] = _nttunpack(b[2*KYBER_N:KYBER_N]);

  r = __polyvec_pointwise_acc(r, a, b);

  r = _nttpack(r);

  for i = 0 to KYBER_N {
    t = r[i];
    (u16)[rp + 2*i] = t;
  }
}

export fn polyvec_ntt_jazz(reg u64 rp) 
{
  stack u16[KYBER_VECN] r;
  reg u16 t;
  inline int i;

  for i = 0 to KYBER_VECN {
    t = (u16)[rp + 2*i];
    r[i] = t;
  }

  r = __polyvec_ntt(r);

  r[0:KYBER_N] = _nttpack(r[0:KYBER_N]);
  r[KYBER_N:KYBER_N] = _nttpack(r[KYBER_N:KYBER_N]);
  r[2*KYBER_N:KYBER_N] = _nttpack(r[2*KYBER_N:KYBER_N]);

  for i = 0 to KYBER_VECN {
    t = r[i];
    (u16)[rp + 2*i] = t;
  }
}

export fn polyvec_invntt_jazz(reg u64 rp) 
{
  stack u16[KYBER_VECN] r;
  reg u16 t;
  inline int i;

  for i = 0 to KYBER_VECN {
    t = (u16)[rp + 2*i];
    r[i] = t;
  }

  r[0:KYBER_N] = _nttunpack(r[0:KYBER_N]);
  r[KYBER_N:KYBER_N] = _nttunpack(r[KYBER_N:KYBER_N]);
  r[2*KYBER_N:KYBER_N] = _nttunpack(r[2*KYBER_N:KYBER_N]);

  r = __polyvec_invntt(r);

  for i = 0 to KYBER_VECN {
    t = r[i];
    (u16)[rp + 2*i] = t;
  }
}

export fn polyvec_csubq_jazz(reg u64 rp) 
{
  stack u16[KYBER_VECN] r;
  reg u16 t;
  inline int i;

  for i = 0 to KYBER_VECN {
    t = (u16)[rp + 2*i];
    r[i] = t;
  }

  r = __polyvec_csubq(r);

  for i = 0 to KYBER_VECN {
    t = r[i];
    (u16)[rp + 2*i] = t;
  }
}

export fn polyvec_reduce_jazz(reg u64 rp) 
{
  stack u16[KYBER_VECN] r;
  reg u16 t;
  inline int i;

  for i = 0 to KYBER_VECN {
    t = (u16)[rp + 2*i];
    r[i] = t;
  }

  r = __polyvec_reduce(r);

  for i = 0 to KYBER_VECN {
    t = r[i];
    (u16)[rp + 2*i] = t;
  }
}
